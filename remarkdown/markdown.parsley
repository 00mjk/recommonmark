# Basic Elements

## Spaces

spacechar = ' ' | '\t'
sp = spacechar*
newline = '\n' | '\r' '\n'?
blank_line = sp newline
spnl = sp (newline sp)?

## Characters

nonspacechar = ~spacechar ~newline anything
special_char =  '~' | '*' | '_' | '`' | '&' | '[' | ']' | '(' | ')' | '<' | '!' | '#' | '\\' | '\'' | '"'

normal_char = ~(special_char | spacechar | newline) anything
escapable_char = :x ?(x in "-\\`|*_{}[\]()#+.!><") -> x
ascii_char = :x ?(x in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") -> x

## HTML entities

hex_entity = <'&' '#' ('X' | 'x') hexdigit+ ';'>
dec_entity = <'&' '#' digit+ ';'>
char_entity = <'&' letterOrDigit+ ';'>

## Indentation

indent = ' '{4} | '\t'
nonindent_space = ' '{0,3}

## End of Line

endline = line_break | terminal_endline | normal_endline
normal_endline = sp newline 
                 ~blank_line 
                 ~'>' 
                 ~(line ('='+ | '-'+) newline) 
                 ~atx_start
                 -> '\n'
terminal_endline = sp newline end -> '\n'
line_break = "  " normal_endline -> dict(id_='line_break')

## Line definitions

line = <(~'\r' ~'\n' anything)* newline> | (<anything+> end)
indented_line = indent line
optionally_indented_line = indent? line
non_blank_indented_line = ~blank_line indented_line


# Inline parsing

inline = text 
         | endline
         | ul_or_star_line
         | space
         | emph
         | strong
         | image
         | link
         | code
         | raw_html
         | entity
         | escaped_char
         | symbol

inlines = inline*

space = spacechar+ -> ' '

text = <normal_char+ text_chunk*>
text_chunk = <normal_char | ('_' ~~letterOrDigit)+> | apos_chunk
# should be part of the smart extension
apos_chunk = '\'' ~~letterOrDigit
           -> dict(id_='apostrophe')

escaped_char = '\\' ~newline <escapable_char>

entity = (hex_entity | dec_entity | char_entity):en
      -> dict(id_='html', children=en)

symbol = <special_char>

# This keeps the parser from getting bogged down on long strings of '*' or '_',
# or strings of '*' or '_' with space on each side:
ul_or_star_line = (ul_line | star_line)
star_line = <'****' '*'*> | <spacechar '*'+ ~~spacechar>
ul_line = <'____' '_'*> | <spacechar '_'+ ~~spacechar>


whitespace = spacechar | newline
emph = (emph_star | emph_ul):child 
     -> builder.emph(child)
emph_star = '*' ~whitespace (~'*' inline | strong_star)+:txt '*'
          -> txt
emph_ul = '_' ~whitespace (~'_' inline | strong_ul)+:txt '_'
          -> txt

strong = (strong_star | strong_ul):child 
       -> builder.strong(child)
strong_star = '**' ~whitespace (~'**' inline)+:txt '**'
          -> txt
strong_ul = '__' ~whitespace (~'__' inline)+:txt '__'
          -> txt

#TODO: make the ~^ part of the notes extentions
label = '[' (~'^')
        (~']' inline)*:label_elements
        ']'
      -> label_elements

image = '!' (explicit_link | reference_link):link
      -> builder.image(**link)

link =  (explicit_link | reference_link | auto_link):link
        -> builder.reference(**link)
explicit_link = label:link_label '(' sp source:url spnl title?:title sp ')'
              -> dict(content=link_label, uri=url, title=title)
source  = '<' <source_contents>:so '>' -> so
           | <source_contents>
source_contents = (( ~'(' ~')' ~'>' nonspacechar)+ | '(' source_contents ')')*

reference_link = reference_link_double | reference_link_single
reference_link_double = label:label spnl ~"[]" label:description
                      -> dict(content=label, label=description)
reference_link_single = label:label (spnl "[]")?
                      -> dict(content=label)

title = ('\'' | '"'):quote 
               <(~(exactly(quote) sp ( ')' | newline)) anything)*>:title 
               exactly(quote)
             -> title

auto_link = auto_link_url | auto_link_email
auto_link_url = '<' <ascii_char+ "://" (~newline ~'>' anything)+>:url '>'
              -> dict(uri=url, content=url)
email_special_char = '-' | '+' | '_' | '.' | '/' | '!' | '%'| '~' | '$'
auto_link_email = '<' ( "mailto:" )? 
                  <(email_special_char | letterOrDigit)+ 
                  '@' ( ~newline ~'>' anything )+>:address '>'
                -> dict(uri='mailto:' + address, content=address)

target = nonindent_space ~'[]' label:label 
            ':' spnl ref_src:src ref_title?:title blank_line+
          -> builder.target(label=label, uri=src, title=title)

ref_src = <nonspacechar+> 

ref_title =  ref_title_quote | ref_title_parens
ref_title_quote = spnl ('\'' | '\"'):quote
                  <(~(exactly(quote) sp newline | newline) anything)*>:title 
                  exactly(quote)
                -> title
ref_title_parens = spnl '(' <(~(')' sp newline | newline) anything)*>:title ')'
                 -> title

references = (target | skip_block)*

code = (<'`'+ ~'`'>:t sp 
         <((~'`' nonspacechar)+ 
         | ~(exactly(t) ~'`') '`'+ 
         | ~(sp exactly(t) ~'`') (spacechar | newline ~blank_line))+>:code
         sp exactly(t) ~'`')
     -> builder.literal(code)

quoted = '"' (~'"' anything)* '"' | '\'' (~'\'' anything)* '\''
html_attribute = <(letterOrDigit | '-')+ spnl ('=' spnl (quoted | (~'>' nonspacechar)+))? spnl>
html_comment = <"<!--" (~"-->" anything)* "-->">
html_tag = <'<' spnl '/'? letter+ spnl html_attribute* '/'? spnl '>'>

#TODO: Add html_block_script
raw_html = (html_comment | html_tag):html
         -> dict(id_='html_tag', data=html)

# Blocks definitions

## Block Quote

quote = quote_lines+:q 
        -> builder.quote(''.join(q))
quote_line = '>' ' '? line:quote 
             -> quote
lazy_quote_line = ~'>' ~blank_line line:quote 
                  -> quote
quote_lines = quote_line:first lazy_quote_line*:rest blank_line*:blank
            -> first + ''.join(rest) + ('\n' if blank else '')

## Verbatim

verbatim = verbatim_chunk+:chunks
           -> builder.verbatim(chunks)
verbatim_chunk = blank_line*:blank
                 non_blank_indented_line+:nbil
                 -> (['\n'] * len(blank) if blank else []) + nbil


## Horizontal Rule
horizontal_rule = nonindent_space
                  (('*' sp){3} ('*' sp)*
                  | ('-' sp){3} ('-' sp)*
                  | ('_' sp){3} ('_' sp)*)
                  sp newline blank_line+ 
                -> builder.horizontal_rule()

## Headings

heading = setext_heading | atx_heading

atx_heading = atx_start:level sp atx_inline+:txt (sp '#'* sp)?  newline
              -> builder.section(txt, level)
atx_inline = ~newline ~(sp '#'* sp newline) inline
atx_start =  '#'{1,6}:x -> len(x)

setext_heading = (setext_heading1 | setext_heading2):(txt, level)
               -> builder.section(txt, level)
settext_bottom1 = '='+ newline
settext_bottom2 = '-'+ newline
settext_inline = (~endline inline)+:txt sp newline -> txt
setext_heading1 = ~~(line settext_bottom1) settext_inline:txt settext_bottom1 -> txt, 1
setext_heading2 = ~~(line settext_bottom2) settext_inline:txt settext_bottom2 -> txt, 2


## Bullet and Ordered lists

bullet = ~horizontal_rule nonindent_space ('*' | '-' | '+') spacechar+
enumerator = nonindent_space digit+ '.' spacechar+

bullet_list = ~~bullet (list_tight | list_loose):list_items
              -> builder.bullet_list(list_items)
ordered_list = ~~enumerator (list_tight | list_loose):list_items
              -> builder.ordered_list(list_items)


list_loose = (list_item_loose:it blank_line* -> it)+:items
             -> items
list_item_loose = (bullet | enumerator) 
                  list_block:item_block 
                  (list_continuation_block)*:continuation
                  -> item_block + ''.join(continuation)

list_tight = list_item_tight+:items blank_line* ~(bullet | enumerator)
             -> items
list_item_tight = (bullet | enumerator) 
                  list_block:item_block
                  (~blank_line list_continuation_block)*:continuation
                  ~list_continuation_block 
                  -> item_block + ''.join(continuation)
                  
list_block = ~blank_line line:first list_block_line*:rest
             -> first + '\n'.join(rest)
list_block_line = ~blank_line 
                  ~(indent? (bullet | enumerator))
                  ~horizontal_rule
                  optionally_indented_line:line
                -> line

# TODO add block separator when blankline is not empty
list_continuation_block = blank_line*:blanks
                          (indent list_block:b -> b)+:block
                          -> ''.join(blanks) + ''.join(block)


## HTML blocks
tag_name = "address" | "blockquote" | "center" | "dir" | "div" | "dl"
    | "fieldset" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "hr"
    | "isindex" | "menu" | "noframes" | "noscript" | "ol" | "p" | "pre" | "table"
    | "ul" | "dd" | "dt" | "frameset" | "li" | "tbody" | "td" | "tfoot" | "th"
    | "thead" | "tr" | "script" | "ADDRESS" | "BLOCKQUOTE" | "CENTER" | "DIR"
    | "DIV" | "DL" | "FIELDSET" | "FORM" | "H1" | "H2" | "H3" | "H4" | "H5" | "H6"
    | "HR" | "ISINDEX" | "MENU" | "NOFRAMES" | "NOSCRIPT" | "OL" | "P" | "PRE"
    | "TABLE" | "UL" | "DD" | "DT" | "FRAMESET" | "LI" | "TBODY" | "TD" | "TFOOT"
    | "TH" | "THEAD" | "TR" | "SCRIPT"

#TODO: make the tags case insensitive
html_block_in_tags = <'<' spnl tag_name:my_tag spnl html_attribute* '>'
              ( ~('<' '/' spnl exactly(my_tag) spnl '>') anything)* 
              ~('<' '/' spnl exactly(my_tag) spnl '>')>
html_block_self_closing = '<' spnl tag_name spnl html_attribute* '/' spnl '>'
html_block = < ( html_block_in_tags | html_comment | html_block_self_closing ) >

## Paragraph
paragraph = nonindent_space inlines:d ~~blank_line
            -> builder.paragraph(d)

## Being extension ready
do_nothing = ~'.' '.'
begin_hook = do_nothing
before_verbatim = do_nothing
before_horizontal_rule = do_nothing
before_lists = do_nothing
before_paragraph = do_nothing
before_plain = do_nothing
before_heading = do_nothing

block = blank_line* (
        begin_hook
        | quote
        | before_verbatim
        | verbatim 
        | target
        | before_horizontal_rule
        | horizontal_rule 
        | before_heading
        | heading
        | before_lists
        | bullet_list 
        | ordered_list 
        | before_paragraph
        | html_block
        | paragraph
        | before_plain
        )

document =  block*:p blank_line* -> p
